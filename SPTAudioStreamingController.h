//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "SPTCoreAudioControllerDelegate-Protocol.h"

@class NSDictionary, NSString, NSURL, SPTCoreAudioController, SPTReachability, SPTSession;
@protocol SPTAudioStreamingDelegate, SPTAudioStreamingPlaybackDelegate, SPTDiskCaching;

@interface SPTAudioStreamingController : NSObject <SPTCoreAudioControllerDelegate>
{
    _Bool _loggedIn;
    _Bool _isPlaying;
    _Bool _isActiveConnectPlaybackDevice;
    _Bool __shuffle;
    _Bool __repeat;
    int _currentTrackIndex;
    id <SPTAudioStreamingDelegate> _delegate;
    id <SPTAudioStreamingPlaybackDelegate> _playbackDelegate;
    id <SPTDiskCaching> _diskCache;
    NSDictionary *_currentTrackMetadata;
    double _volume;
    double _currentPlaybackPosition;
    double _currentTrackDuration;
    NSURL *_currentTrackURI;
    unsigned long long _targetBitrate;
    SPTCoreAudioController *_audioController;
    NSString *_remoteName;
    CDUnknownBlockType _loginBlock;
    CDUnknownBlockType _playBlock;
    NSString *_cacheRoot;
    long long _cacheAgeLimit;
    unsigned long long _cacheSizeLimit;
    SPTSession *_session;
    SPTReachability *_reachability;
}

+ (void)runBackgroundRunloop:(CDUnknownBlockType)arg1;
+ (void)dispatchToAudioThread:(CDUnknownBlockType)arg1 waitUntilDone:(_Bool)arg2;
+ (void)dispatchToAudioThread:(CDUnknownBlockType)arg1;
+ (struct __CFRunLoop *)audioRunloop;
+ (void)initialize;
@property(retain, nonatomic) SPTReachability *reachability; // @synthesize reachability=_reachability;
@property(retain, nonatomic) SPTSession *session; // @synthesize session=_session;
@property(nonatomic) unsigned long long cacheSizeLimit; // @synthesize cacheSizeLimit=_cacheSizeLimit;
@property(nonatomic) long long cacheAgeLimit; // @synthesize cacheAgeLimit=_cacheAgeLimit;
@property(retain, nonatomic) NSString *cacheRoot; // @synthesize cacheRoot=_cacheRoot;
@property(copy, nonatomic) CDUnknownBlockType playBlock; // @synthesize playBlock=_playBlock;
@property(copy, nonatomic) CDUnknownBlockType loginBlock; // @synthesize loginBlock=_loginBlock;
@property(nonatomic) _Bool _repeat; // @synthesize _repeat=__repeat;
@property(nonatomic) _Bool _shuffle; // @synthesize _shuffle=__shuffle;
@property(nonatomic) _Bool isActiveConnectPlaybackDevice; // @synthesize isActiveConnectPlaybackDevice=_isActiveConnectPlaybackDevice;
@property(copy, nonatomic) NSString *remoteName; // @synthesize remoteName=_remoteName;
@property(retain, nonatomic) SPTCoreAudioController *audioController; // @synthesize audioController=_audioController;
@property(nonatomic) unsigned long long targetBitrate; // @synthesize targetBitrate=_targetBitrate;
@property(nonatomic) int currentTrackIndex; // @synthesize currentTrackIndex=_currentTrackIndex;
@property(retain, nonatomic) NSURL *currentTrackURI; // @synthesize currentTrackURI=_currentTrackURI;
@property(nonatomic) double currentTrackDuration; // @synthesize currentTrackDuration=_currentTrackDuration;
@property(nonatomic) double currentPlaybackPosition; // @synthesize currentPlaybackPosition=_currentPlaybackPosition;
@property(nonatomic) double volume; // @synthesize volume=_volume;
@property(nonatomic) _Bool isPlaying; // @synthesize isPlaying=_isPlaying;
@property(copy, nonatomic) NSDictionary *currentTrackMetadata; // @synthesize currentTrackMetadata=_currentTrackMetadata;
@property(retain, nonatomic) id <SPTDiskCaching> diskCache; // @synthesize diskCache=_diskCache;
@property(nonatomic) __weak id <SPTAudioStreamingPlaybackDelegate> playbackDelegate; // @synthesize playbackDelegate=_playbackDelegate;
@property(nonatomic) __weak id <SPTAudioStreamingDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool loggedIn; // @synthesize loggedIn=_loggedIn;
- (void).cxx_destruct;
- (void)hill;
- (void)hasselhoff;
- (void)rickroll;
- (void)getAbsoluteTrackMetadata:(int)arg1 callback:(CDUnknownBlockType)arg2;
- (void)getRelativeTrackMetadata:(int)arg1 callback:(CDUnknownBlockType)arg2;
- (void)coreAudioController:(id)arg1 didOutputAudioOfDuration:(double)arg2;
@property(readonly, nonatomic) int queueSize;
@property(readonly, nonatomic) int trackListSize;
@property(nonatomic) int trackListPosition;
- (void)stop:(CDUnknownBlockType)arg1;
- (void)queueClear:(CDUnknownBlockType)arg1;
- (void)queuePlay:(CDUnknownBlockType)arg1;
- (void)queueTrackProvider:(id)arg1 clearQueue:(_Bool)arg2 callback:(CDUnknownBlockType)arg3;
- (void)queueURI:(id)arg1 clearQueue:(_Bool)arg2 callback:(CDUnknownBlockType)arg3;
- (void)queueURI:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)queueURIs:(id)arg1 clearQueue:(_Bool)arg2 callback:(CDUnknownBlockType)arg3;
- (void)playTrackProvider:(id)arg1 fromIndex:(int)arg2 callback:(CDUnknownBlockType)arg3;
- (void)playTrackProvider:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)playURI:(id)arg1 fromIndex:(int)arg2 callback:(CDUnknownBlockType)arg3;
- (void)playURI:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)playURIs:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)playURIs:(id)arg1 fromIndex:(int)arg2 callback:(CDUnknownBlockType)arg3;
- (void)playURIs:(id)arg1 withOptions:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (void)playURIsFromIndex:(int)arg1 callback:(CDUnknownBlockType)arg2;
- (void)replaceURIs:(id)arg1 withCurrentTrack:(int)arg2 callback:(CDUnknownBlockType)arg3;
- (void)setURIs:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)expandUnsupportedURIs:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)setIsPlaying:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;
- (void)seekToOffset:(double)arg1 callback:(CDUnknownBlockType)arg2;
@property(nonatomic) _Bool shuffle;
@property(nonatomic) _Bool repeat;
- (void)setTargetBitrate:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;
- (void)setVolume:(double)arg1 callback:(CDUnknownBlockType)arg2;
- (void)skipPrevious:(CDUnknownBlockType)arg1;
- (void)skipNext:(CDUnknownBlockType)arg1;
- (void)logout:(CDUnknownBlockType)arg1;
- (void)loginWithSession:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (id)filterCompanyNameOrAppName:(id)arg1;
- (void)recheckReachability:(id)arg1;
- (void)reachabilityDidChange:(id)arg1;
- (void)dealloc;
- (id)initWithClientId:(id)arg1 audioController:(id)arg2;
- (id)initWithClientId:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

