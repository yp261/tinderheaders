//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@interface SPTRequest : NSObject
{
}

+ (void)setErrorCode:(int)arg1 withDescription:(id)arg2 toError:(id *)arg3;
+ (id)createError:(int)arg1 withDescription:(id)arg2;
+ (id)createRequestForItemAtURI:(id)arg1 withAccessToken:(id)arg2 error:(id *)arg3;
+ (id)createRequestForURL:(id)arg1 withAccessToken:(id)arg2 httpMethod:(id)arg3 values:(id)arg4 valueBodyIsJSON:(_Bool)arg5 sendDataAsQueryString:(_Bool)arg6 error:(id *)arg7;
+ (id)createRequestForURL:(id)arg1 withAccessToken:(id)arg2 httpMethod:(id)arg3 values:(id)arg4 valueBodyIsJSON:(_Bool)arg5 error:(id *)arg6;
+ (id)createRequestForURL:(id)arg1 withAccessToken:(id)arg2 httpMethod:(id)arg3 values:(id)arg4 error:(id *)arg5;
+ (id)createRequestForURL:(id)arg1 withAccessToken:(id)arg2 error:(id *)arg3;
+ (void)setSharedHandler:(id)arg1;
+ (id)sharedHandler;
+ (void)requestNewReleasesForCountry:(id)arg1 limit:(long long)arg2 offset:(long long)arg3 session:(id)arg4 callback:(CDUnknownBlockType)arg5;
+ (void)requestFeaturedPlaylistsForCountry:(id)arg1 limit:(long long)arg2 offset:(long long)arg3 locale:(id)arg4 timestamp:(id)arg5 session:(id)arg6 callback:(CDUnknownBlockType)arg7;
+ (void)recursivelyRequestItems:(id)arg1 withPager:(CDUnknownBlockType)arg2 pageSize:(unsigned long long)arg3 previouslyFetchedItems:(id)arg4 callback:(CDUnknownBlockType)arg5;
+ (void)performSequentialMultiget:(id)arg1 pager:(CDUnknownBlockType)arg2 pagesize:(int)arg3 callback:(CDUnknownBlockType)arg4;
+ (id)urlEncodeString:(id)arg1;
+ (id)performRequestAtURL:(id)arg1 withSession:(id)arg2 httpMethod:(id)arg3 values:(id)arg4 valueBodyIsJSON:(_Bool)arg5 sendDataAsQueryString:(_Bool)arg6 error:(id *)arg7;
+ (id)performRequestAtURL:(id)arg1 withSession:(id)arg2 httpMethod:(id)arg3 values:(id)arg4 valueBodyIsJSON:(_Bool)arg5 error:(id *)arg6;
+ (id)performRequestAtURL:(id)arg1 withSession:(id)arg2 httpMethod:(id)arg3 values:(id)arg4 error:(id *)arg5;
+ (id)performRequestAtURL:(id)arg1 withSession:(id)arg2 error:(id *)arg3;
+ (void)queueMockResponse:(id)arg1 withStatusCode:(int)arg2;
+ (void)queueMockResponse:(id)arg1;
+ (void)clearMockResponses;
+ (id)createRequestForPlaylistAtURI:(id)arg1 withAccessToken:(id)arg2 error:(id *)arg3;
+ (void)requestPlaylistAtURI:(id)arg1 withSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)starredListForUserInSession:(id)arg1 callback:(CDUnknownBlockType)arg2;
+ (void)removeTracksFromSaved:(id)arg1 forUserInSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)savedTracksContains:(id)arg1 forUserInSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)saveTracks:(id)arg1 forUserInSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)savedTracksForUserInSession:(id)arg1 callback:(CDUnknownBlockType)arg2;
+ (void)playlistsForUser:(id)arg1 withSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)playlistsForUserInSession:(id)arg1 callback:(CDUnknownBlockType)arg2;
+ (void)internalRequestMultipleArtists:(id)arg1 withSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)internalRequestMultipleAlbums:(id)arg1 withSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)internalRequestMultipleTracks:(id)arg1 withSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (id)createRequestForItemAtURI:(id)arg1 withSession:(id)arg2 market:(id)arg3 error:(id *)arg4;
+ (id)createRequestForItemAtURI:(id)arg1 withSession:(id)arg2 error:(id *)arg3;
+ (void)requestItemAtURI:(id)arg1 withSession:(id)arg2 market:(id)arg3 callback:(CDUnknownBlockType)arg4;
+ (void)requestItemAtURI:(id)arg1 withSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)userInformationForUserInSession:(id)arg1 callback:(CDUnknownBlockType)arg2;
+ (id)lookupRequestURLForSpotifyURI:(id)arg1 parameterString:(id)arg2;
+ (_Bool)hasLookupRequestURLForSpotifyURI:(id)arg1;
+ (void)performSearchWithQuery:(id)arg1 queryType:(unsigned long long)arg2 session:(id)arg3 callback:(CDUnknownBlockType)arg4;
+ (void)performSearchWithQuery:(id)arg1 queryType:(unsigned long long)arg2 offset:(long long)arg3 session:(id)arg4 callback:(CDUnknownBlockType)arg5;
+ (void)performSearchWithQuery:(id)arg1 queryType:(unsigned long long)arg2 session:(id)arg3 market:(id)arg4 callback:(CDUnknownBlockType)arg5;
+ (void)performSearchWithQuery:(id)arg1 queryType:(unsigned long long)arg2 offset:(long long)arg3 session:(id)arg4 market:(id)arg5 callback:(CDUnknownBlockType)arg6;
+ (id)rootObjectNameFromSearchQueryType:(unsigned long long)arg1;
+ (id)typeNameFromSearchQueryType:(unsigned long long)arg1;
+ (void)requestItemFromPartialObject:(id)arg1 withSession:(id)arg2 market:(id)arg3 callback:(CDUnknownBlockType)arg4;
+ (void)requestItemFromPartialObject:(id)arg1 withSession:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)registerExtras:(id)arg1 forURIPredicate:(id)arg2;

@end

